{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "value::all"
        ],
        "parameters": [
          {
            "id": "6c14aa18-29d3-4b94-81a9-4499c98aa9bb",
            "version": "KqlParameterItem/1.0",
            "name": "Subscriptions",
            "type": 6,
            "description": "The subscriptions in which your LA Workspaces were created",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false
            },
            "timeContext": {
              "durationMs": 604800000
            }
          },
          {
            "id": "f430b9f7-0bcb-49de-ad5d-67547345d26e",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "description": "The LA Workspaces which you configured in Azure Backup Diagnostic settings",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'microsoft.operationalinsights/workspaces'\r\n| project id",
            "crossComponentResources": [
              "{Subscriptions}"
            ],
            "value": [],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "customWidth": "50",
      "name": "parameters - 1"
    },
    {
      "type": 1,
      "content": {
        "json": "<br><a href=\"#\">What happened to the Power BI reports?</a>"
      },
      "customWidth": "50",
      "name": "text - 8"
    },
    {
      "type": 1,
      "content": {
        "json": "______________"
      },
      "name": "text - 9"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "8c4ae44c-fa9a-4498-aedc-736a56e64b43",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "4756b65c-80b2-4477-9bec-626cc713dfd7",
            "version": "KqlParameterItem/1.0",
            "name": "BMSTypeWithBackupItemType",
            "label": "Backup Item Type",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Fetch data from AzureDiagnostics\r\nlet RecordsUnderAzureDiagnostics = ( ) \r\n{\r\nAzureDiagnostics\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\"\r\n| extend  BackupManagementType = BackupManagementType_s, BackupItemType = BackupItemType_s \r\n};\r\n// Fetch data from ResourceSpecific\r\nlet RecordsUnderResourceSpecific = ( ) \r\n{\r\nCoreAzureBackup\r\n| where OperationName == \"BackupItem\"\r\n};\r\nCombinedTable | union isfuzzy = true \r\n(RecordsUnderAzureDiagnostics()),\r\n(RecordsUnderResourceSpecific())\r\n| distinct BackupManagementType, BackupItemType\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType) \r\n| distinct BMSTypeWithBackupItemType",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a83acc5-2123-476f-8a4c-da2fddf231a1",
            "version": "KqlParameterItem/1.0",
            "name": "Location",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| extend VaultName = VaultName_s, AzureDataCenter = AzureDataCenter_s\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| distinct AzureDataCenter};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fefd31fa-2774-43ca-8cc3-44d477c969f0",
            "version": "KqlParameterItem/1.0",
            "name": "Vault",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used -  BMSTypeWithBackupItemType, Location\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n// Filter by Parameter\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| extend VaultName = VaultName_s, AzureDataCenter = AzureDataCenter_s\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n// Filter by Parameter\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId, VaultName, AzureDataCenter;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n// Filter by Parameter\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\nBackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = ()\r\n{CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| distinct VaultName};\r\nLatestBackupItemTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "____________"
      },
      "name": "text - 10"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "nav",
        "links": [
          {
            "cellValue": "",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Summary",
            "subTarget": "{BackupManagementType}",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Summary",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Protected Instances",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Protected Instances",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Storage",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Storage",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": " ",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Job Distribution",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Job Distribution",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "FilterBackupItemGridBasedOnParameterSelection",
            "linkTarget": "step",
            "linkLabel": "Job Details",
            "style": "primary"
          },
          {
            "cellValue": "",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Alert Distribution",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Alert Distribution",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          },
          {
            "cellValue": "",
            "linkTarget": "WorkbookTemplate",
            "linkLabel": "Alert Details",
            "style": "secondary",
            "workbookContext": {
              "componentIdSource": "workbook",
              "resourceIdsSource": "workbook",
              "templateIdSource": "static",
              "templateId": "Community-Workbooks/Azure Backup/Alert Details",
              "typeSource": "default",
              "gallerySource": "static",
              "gallery": "Azure Monitor"
            }
          }
        ]
      },
      "customWidth": "100",
      "name": "links - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId);\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable = AzureDiagnostics \r\n| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestParentTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId, BackupManagementServerUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestParentTable | distinct ProtectedContainerUniqueId | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestParentTable | distinct BackupManagementServerUniqueId | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s;\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n| distinct JobStatus, JobUniqueId\r\n);\r\nlet JobSuccessPercent = LatestJobTable\r\n| extend success=iff((JobStatus == \"Completed\" or JobStatus == \"CompletedWithWarnings\") , 1 , 0)\r\n| extend record = 1 // to be used for total row count\r\n| summarize SuccessfulCount =sum(success), TotalCount=sum(record)\r\n| extend JobSuccessPercentage = (SuccessfulCount*100)/todouble(TotalCount)\r\n| project JobSuccessPercentage \r\n| extend  Key = pack_array(\"Success%\"), Value = pack_array( JobSuccessPercentage), Row = pack_array(1000)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row; \r\nlet JobStatusTable = LatestJobTable\r\n| summarize dcount(JobUniqueId) by JobStatus\r\n| order by JobStatus asc\r\n| extend row_num = row_number()\r\n| extend  Key = pack_array(JobStatus), Value = pack_array( dcount_JobUniqueId), Row = pack_array(row_num)\r\n| project Key, Value, Row\r\n| mvexpand  Key, Value, Row;\r\nunion  JobStatusTable, JobSuccessPercent \r\n| order by toint(Row) asc",
        "size": 4,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Key",
            "formatOptions": {
              "showIcon": true
            }
          },
          "subtitleContent": {
            "columnMatch": "SubTitle",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            }
          },
          "leftContent": {
            "columnMatch": "Value",
            "formatter": 1,
            "formatOptions": {
              "showIcon": true
            },
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "maximumFractionDigits": 2
              }
            }
          },
          "showBorder": true
        }
      },
      "name": "query - 10"
    },
    {
      "type": 1,
      "content": {
        "json": "_______________________"
      },
      "name": "text - 10"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "99bfb0c0-2e58-4bfb-be19-e29f94a429c9",
            "version": "KqlParameterItem/1.0",
            "name": "JobOperation",
            "label": "Job Operation",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId);\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable = AzureDiagnostics \r\n| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestParentTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId, BackupManagementServerUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestParentTable | distinct ProtectedContainerUniqueId | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestParentTable | distinct BackupManagementServerUniqueId | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"));\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n| distinct JobOperation\r\n);\r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "0422bf8a-8025-4c1d-a5d7-abd1836a5366",
            "version": "KqlParameterItem/1.0",
            "name": "JobStatus",
            "label": "Job Status",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId);\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation});\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable = AzureDiagnostics \r\n| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestParentTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId, BackupManagementServerUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestParentTable | distinct ProtectedContainerUniqueId | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestParentTable | distinct BackupManagementServerUniqueId | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation});\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation});\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n| distinct JobStatus\r\n);\r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "4286ad09-38e2-4ec7-9942-806344162875",
            "version": "KqlParameterItem/1.0",
            "name": "JobFailureCode",
            "label": "Job Failure Code",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemTable = materialize(CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId);\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable = AzureDiagnostics \r\n| where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n| where OperationName == \"BackupItemAssociation\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestParentTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| distinct ProtectedContainerUniqueId, BackupManagementServerUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestParentTable | distinct ProtectedContainerUniqueId | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestParentTable | distinct BackupManagementServerUniqueId | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s;\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n| distinct JobFailureCode\r\n);\r\nLatestJobTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 7"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "a29464c3-34f0-4d60-82bb-614b8128b7f9",
            "version": "KqlParameterItem/1.0",
            "name": "SelectedContainerNameWithBackupItemName",
            "label": "Search BackupItem Name",
            "type": 1,
            "value": "",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5dc2a074-b510-44f2-9530-cfcbd159b59c",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricSortBy",
            "label": "Sort By:",
            "type": 2,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"JobDurationInSec\", \"label\": \"JobDurationInSec\" },\r\n{ \"value\": \"JobCreationTime\", \"label\": \"JobCreationTime\" }, \r\n{ \"value\": \"JobCreationDate\", \"label\": \"JobCreationDate\" },{ \"value\": \"DataTransferredInMB\", \"label\": \"DataTransferredInMB\", \"selected\":true }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "df3cc03c-53f7-4523-a29b-e50bf1b6d922",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricOrder",
            "label": "Order:",
            "type": 2,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"value\": \"asc\", \"label\": \"Ascending\" },{ \"value\": \"desc\", \"label\": \"Descending\", \"selected\":true }]",
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "bd8c20d7-10eb-4a04-8519-07fbd2311f18",
            "version": "KqlParameterItem/1.0",
            "name": "JobMetricPageNumber",
            "label": "Page",
            "type": 2,
            "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, JobOperation, JobStatus, JobFailureCode, JobMetricSortBy, JobMetricOrder\r\n//let JobMetricOrder = '{JobMetricOrder}';\r\n//let JobMetricSortBy = '{JobMetricSortBy}';\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s, BackupItemName = BackupItemName_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable =  AzureDiagnostics\r\n| where OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| distinct ProtectedContainerName_s, ProtectedContainerUniqueId_s\r\n| join kind= rightouter  (\r\n    AzureDiagnostics \r\n    | where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n    // Take records until previous day\r\n    | extend TimeRangeEnd = TimeGenerated\r\n    | where TimeRangeEnd < Today\r\n) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s \r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerName = ProtectedContainerName_s, \r\nPolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\")\r\n| extend  PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid);\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable =  CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| distinct ProtectedContainerName, ProtectedContainerUniqueId\r\n| join kind= rightouter  (\r\n    CoreAzureBackup \r\n    | where OperationName == \"BackupItemAssociation\" \r\n    // Take records until previous day\r\n    | extend TimeRangeEnd = TimeGenerated\r\n    | where TimeRangeEnd < Today\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestBackupItemAssociationTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemDimensionTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| where ContainerNameWithBackupItemName contains (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in ('{SelectedContainerNameWithBackupItemName}')\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n);\r\nlet LatestBackupItemInfoTable = materialize(\r\nLatestBackupItemAssociationTable | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestBackupItemAssociationTable | distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestBackupItemAssociationTable | distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s),\r\nJobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, ContainerNameWithBackupItemName, JobStartDateTime, PolicyUniqueId, ResourceId\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s),\r\nJobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n// BackupItemName Not applicable\r\n| extend BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\"\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, ContainerNameWithBackupItemName, JobStartDateTime, ResourceId \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, \r\nJobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s), JobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n// BackupItemName Not applicable\r\n| extend BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\"\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode,   BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, JobStartDateTime, ResourceId \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where ContainerNameWithBackupItemName contains (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in ('{SelectedContainerNameWithBackupItemName}')\r\n);\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| extend PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s\r\n| extend  PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| distinct PolicyUniqueId, PolicyName ;\r\nPolicyTable\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Policy\" \r\n| distinct PolicyUniqueId, PolicyName;\r\nPolicyTable\r\n};\r\nlet LatestPolicyTable = () {CombinedTable | union isfuzzy = true \r\n(PolicyUnderAzureDiagnostics()),\r\n(PolicyUnderResourceSpecific())\r\n| distinct PolicyUniqueId, PolicyName};\r\nlet JobMetricTable = ()\r\n{\r\nLatestJobTable\r\n| sort by DataTransferredInMB desc\r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/10 + 1))\r\n| distinct page_num\r\n}; \r\nJobMetricTable",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "1",
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "0",
      "name": "parameters - 7",
      "styleSettings": {
        "margin": "0% 0% 0% 0%",
        "padding": "0% 0% 0% 0%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Parameter Used - Vault, Location, BMSTypeWithBackupItemType, JobOperation, JobStatus, JobFailureCode, JobMetricSortBy, JobMetricOrder\r\n//let JobMetricOrder = '{JobMetricOrder}';\r\n//let JobMetricSortBy = '{JobMetricSortBy}';\r\n// Time variable used\r\nlet Today = startofday(now());\r\n// Fetch data from AzureDiagnostics\r\nlet BackupItemsUnderAzureDiagnostics = ( ) \r\n{\r\nlet VaultTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" and SchemaVersion_s == \"V2\"\r\n| where VaultName_s in  ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter_s in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and SchemaVersion_s == \"V2\" and State_s != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType_s, \"/\", BackupItemType_s), BackupItemUniqueId = BackupItemUniqueId_s, BackupItemName = BackupItemName_s\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\n// Fetch data from ResourceSpecific\r\nlet BackupItemsUnderResourceSpecific = ( ) \r\n{\r\nlet VaultTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Vault\" \r\n| where VaultName in ({Vault}) or '*' in ({Vault})\r\n| where AzureDataCenter in ({Location}) or '*' in ({Location})\r\n| project ResourceId;\r\nlet BackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n| extend BMSTypeWithBackupItemType = strcat(BackupManagementType, \"/\", BackupItemType)\r\n| where BMSTypeWithBackupItemType in ({BMSTypeWithBackupItemType}) or '*' in ({BMSTypeWithBackupItemType})\r\n;\r\nlet BackupItemsInSelectedVault = VaultTable | join kind= inner (\r\n   BackupItemTable \r\n) on ResourceId == ResourceId;\r\nBackupItemsInSelectedVault\r\n};\r\nlet LatestBackupItemDimensionTable = () {CombinedTable | union isfuzzy = true \r\n(BackupItemsUnderAzureDiagnostics()),\r\n(BackupItemsUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| project BackupItemUniqueId,  BackupItemName, BMSTypeWithBackupItemType};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ( )\r\n{\r\nlet BackupItemAssociationTable =  AzureDiagnostics\r\n| where OperationName == \"ProtectedContainer\"  and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| distinct ProtectedContainerName_s, ProtectedContainerUniqueId_s\r\n| join kind= rightouter  (\r\n    AzureDiagnostics \r\n    | where OperationName == \"BackupItemAssociation\" and SchemaVersion_s == \"V2\"\r\n    // Take records until previous day\r\n    | extend TimeRangeEnd = TimeGenerated\r\n    | where TimeRangeEnd < Today\r\n) on ProtectedContainerUniqueId_s == ProtectedContainerUniqueId_s \r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerName = ProtectedContainerName_s, \r\nPolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\")\r\n| extend  PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid);\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ( )\r\n{\r\nlet BackupItemAssociationTable =  CoreAzureBackup\r\n| where OperationName == \"ProtectedContainer\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| distinct ProtectedContainerName, ProtectedContainerUniqueId\r\n| join kind= rightouter  (\r\n    CoreAzureBackup \r\n    | where OperationName == \"BackupItemAssociation\" \r\n    // Take records until previous day\r\n    | extend TimeRangeEnd = TimeGenerated\r\n    | where TimeRangeEnd < Today\r\n) on ProtectedContainerUniqueId == ProtectedContainerUniqueId;\r\nBackupItemAssociationTable\r\n};\r\nlet LatestBackupItemAssociationTable = materialize(\r\nCombinedTable | union isfuzzy = true \r\n(BackupItemAssociationUnderAzureDiagnostics()),\r\n(BackupItemAssociationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId\r\n| join kind= inner (LatestBackupItemDimensionTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| extend ContainerNameWithBackupItemName = strcat(ProtectedContainerName, \"/\", BackupItemName)\r\n| where ContainerNameWithBackupItemName contains (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in ('{SelectedContainerNameWithBackupItemName}')\r\n| distinct BackupItemUniqueId, ContainerNameWithBackupItemName, BackupItemName, ProtectedContainerUniqueId, ProtectedContainerName, BackupManagementServerUniqueId, BMSTypeWithBackupItemType, PolicyUniqueId\r\n);\r\nlet LatestBackupItemInfoTable = materialize(\r\nLatestBackupItemAssociationTable | distinct BackupItemUniqueId, ContainerNameWithBackupItemName,  BackupItemName, BMSTypeWithBackupItemType, PolicyUniqueId\r\n);\r\nlet LatestProtectedContainerTable = ( ) \r\n{\r\nLatestBackupItemAssociationTable | distinct ProtectedContainerUniqueId, BMSTypeWithBackupItemType | where ProtectedContainerUniqueId != \"\"\r\n};\r\nlet LatestBackupManagementServerTable = ()\r\n{\r\nLatestBackupItemAssociationTable | distinct BackupManagementServerUniqueId, BMSTypeWithBackupItemType | where BackupManagementServerUniqueId != \"\"\r\n};\r\nlet JobBasedOnBackupItemUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend BackupItemUniqueId = BackupItemUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s),\r\nJobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnBackupItemUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnBackupItem = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupItemUnderAzureDiagnostics()),\r\n(JobBasedOnBackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupItemInfoTable) on BackupItemUniqueId == BackupItemUniqueId\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, ContainerNameWithBackupItemName, JobStartDateTime, PolicyUniqueId, ResourceId\r\n};\r\nlet JobBasedOnProtectedContainerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, JobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s),\r\nJobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnProtectedContainerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueID as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet LatestJobTableBasedOnProtectedContainer = (){\r\nCombinedTable | union isfuzzy = true \r\n(JobBasedOnProtectedContainerUnderAzureDiagnostics()),\r\n(JobBasedOnProtectedContainerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by ProtectedContainerUniqueId, JobUniqueId\r\n| join kind= inner (LatestProtectedContainerTable) on ProtectedContainerUniqueId == ProtectedContainerUniqueId\r\n// BackupItemName Not applicable\r\n| extend BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\"\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, BackupItemName, BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, ContainerNameWithBackupItemName, JobStartDateTime, ResourceId \r\n};\r\nlet JobBasedOnBackupManagementServerUnderAzureDiagnostics = ( )\r\n{\r\nlet JobTable = AzureDiagnostics \r\n| where OperationName == \"Job\" and SchemaVersion_s == \"V2\"\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Log\") or (JobOperation_s  == \"Backup\" and JobOperationSubType_s == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation_s in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus_s in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode_s in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n| extend BackupManagementServerUniqueId = BackupManagementServerUniqueId_s, ProtectedContainerUniqueId = ProtectedContainerUniqueId_s, JobUniqueId = JobUniqueId_g, JobStatus = JobStatus_s, \r\nJobOperation = JobOperation_s, JobFailureCode = JobFailureCode_s, DataTransferredInMB = todouble(DataTransferredInMB_s), JobDurationInSec = todouble(JobDurationInSecs_s), JobStartDateTime = todatetime(JobStartDateTime_s);\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServerUnderResourceSpecific = ( )\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n| where OperationName == \"Job\" \r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n// Filtering out Non-Null BackupItemUniqueId, ProtectedContainerUniqueId as it is taken care by JobBasedOnBackupItem\r\n| where BackupItemUniqueId_s == \"\" and ProtectedContainerUniqueId_s == \"\"\r\n| where not((JobOperation  == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))\r\n// Parameter Filter\r\n| where JobOperation in ({JobOperation}) or '*' in ({JobOperation})\r\n| where JobStatus in ({JobStatus}) or '*' in ({JobStatus})\r\n| where JobFailureCode in ({JobFailureCode}) or '*' in ({JobFailureCode})\r\n;\r\nJobTable\r\n};\r\nlet JobBasedOnBackupManagementServer = (){\r\n CombinedTable | union isfuzzy = true \r\n(JobBasedOnBackupManagementServerUnderAzureDiagnostics()),\r\n(JobBasedOnBackupManagementServerUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)  by BackupManagementServerUniqueId, JobUniqueId\r\n| join kind= inner (LatestBackupManagementServerTable) on BackupManagementServerUniqueId == BackupManagementServerUniqueId\r\n// BackupItemName Not applicable\r\n| extend BackupItemName = \"NaN\", ContainerNameWithBackupItemName = \"NaN\"\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode,   BMSTypeWithBackupItemType, DataTransferredInMB, JobDurationInSec, JobStartDateTime, ResourceId \r\n};\r\nlet LatestJobTable = materialize\r\n(CombinedTable | union isfuzzy = true \r\n(LatestJobTableBasedOnBackupItem()),\r\n(LatestJobTableBasedOnProtectedContainer()),\r\n(JobBasedOnBackupManagementServer())\r\n// To Exclude NaN from Search filter\r\n| where ContainerNameWithBackupItemName contains (@\"{SelectedContainerNameWithBackupItemName}\") or '*' in ('{SelectedContainerNameWithBackupItemName}')\r\n);\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Policy\" and SchemaVersion_s == \"V2\"\r\n| extend PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = PolicyName_s\r\n| extend  PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid)\r\n| distinct PolicyUniqueId, PolicyName ;\r\nPolicyTable\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| extend TimeRangeEnd = TimeGenerated\r\n| where TimeRangeEnd < Today\r\n| where OperationName == \"Policy\" \r\n| distinct PolicyUniqueId, PolicyName;\r\nPolicyTable\r\n};\r\nlet LatestPolicyTable = () {CombinedTable | union isfuzzy = true \r\n(PolicyUnderAzureDiagnostics()),\r\n(PolicyUnderResourceSpecific())\r\n| distinct PolicyUniqueId, PolicyName};\r\nlet JobMetricTable = ()\r\n{\r\nLatestJobTable\r\n| sort by DataTransferredInMB \r\n| extend row_num = row_number()\r\n| extend page_num = tostring(((row_num-1)/10 + 1))\r\n| where page_num has ('{JobMetricPageNumber}') or '*' in ('{JobMetricPageNumber}')\r\n| extend JobCreationDate = format_datetime(JobStartDateTime, 'yyyy-MM-dd')\r\n| extend JobCreationTime = format_datetime(JobStartDateTime, 'HH:mm:ss')\r\n| join kind= leftouter (LatestPolicyTable) on PolicyUniqueId == PolicyUniqueId\r\n| extend JobLink = strcat(ResourceId, \"/backupJobs/\", JobUniqueId)\r\n| extend PolicyLink = strcat(ResourceId, \"/backupPolicies/\", PolicyName)\r\n| project ContainerNameWithBackupItemName, JobUniqueId, JobCreationDate, JobCreationTime, JobFailureCode, DataTransferredInMB, JobDurationInSec, PolicyName, PolicyLink, JobLink\r\n}; \r\nJobMetricTable",
        "size": 0,
        "showExportToExcel": true,
        "exportToExcelOptions": "visible",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "ContainerNameWithBackupItemName",
              "formatter": 16,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobUniqueId",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "JobLink",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobCreationDate",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobCreationTime",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobFailureCode",
              "formatter": 1,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "DataTransferredInMB",
              "formatter": 4,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "JobDurationInSec",
              "formatter": 4,
              "formatOptions": {
                "palette": "orange",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "PolicyName",
              "formatter": 16,
              "formatOptions": {
                "linkColumn": "PolicyLink",
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "PolicyLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "JobLink",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "ContainerNameWithBackupItemName",
              "label": "Backup Item Name"
            },
            {
              "columnId": "JobUniqueId",
              "label": "Job Unique Id"
            },
            {
              "columnId": "JobCreationDate",
              "label": "Job Creation Date"
            },
            {
              "columnId": "JobCreationTime",
              "label": "Job Creation Time"
            },
            {
              "columnId": "JobFailureCode",
              "label": "Job Failure Code"
            },
            {
              "columnId": "DataTransferredInMB",
              "label": "Data Transferred (MB)"
            },
            {
              "columnId": "JobDurationInSec",
              "label": "Job Duration (sec)"
            },
            {
              "columnId": "PolicyName",
              "label": "Policy Name"
            },
            {
              "columnId": "PolicyLink"
            },
            {
              "columnId": "JobLink"
            }
          ]
        }
      },
      "customWidth": "100",
      "name": "query - 11",
      "styleSettings": {
        "showBorder": true
      }
    }
  ],
  "styleSettings": {},
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}