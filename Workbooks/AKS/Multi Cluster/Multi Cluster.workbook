{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "value::selected"
        ],
        "parameters": [
          {
            "id": "64f87c0f-eed6-4e3d-b820-996c88ae8a03",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time Range",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 14400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            }
          },
          {
            "id": "a3a006f1-e89d-4628-8622-e06915226c05",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.ContainerService/managedClusters'\r\n| summarize Count = count() by subscriptionId\r\n| order by Count desc\r\n| extend Rank = row_number()\r\n| project value = subscriptionId, label = subscriptionId, selected = Rank == 1",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "6920400e-5b98-4cc8-adc8-a0dc242d1685",
            "version": "KqlParameterItem/1.0",
            "name": "selectedCluster",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "where type =~ 'Microsoft.ContainerService/managedClusters'\r\n| order by name asc\r\n| extend Rank = row_number()\r\n| project value = id, label = id, selected = Rank <= 5",
            "crossComponentResources": [
              "value::selected"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "cluster parameter"
    },
    {
      "type": 1,
      "content": {
        "json": "<h2>Multi cluster dashboard</h2>"
      },
      "name": "Title"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "overview",
            "style": "link"
          },
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Cluster Performance",
            "subTarget": "cpu",
            "style": "link"
          },
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Controllers",
            "subTarget": "applications",
            "style": "link"
          },
          {
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "IO / Network",
            "subTarget": "io",
            "style": "link"
          }
        ]
      },
      "name": "Tabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "KubeNodeInventory\r\n| where TimeGenerated {timeRange:query}\r\n| extend OS=tostring(parse_json(Labels)[0][\"beta.kubernetes.io/os\"])\r\n| summarize  LinuxNodes=dcountif(Computer, OS == 'linux'), WindowsNodes=dcountif(Computer, OS == 'windows') by  ClusterName\r\n| extend Title = ClusterName, Content = strcat(LinuxNodes,\" üêß, \", WindowsNodes,\" üñ•Ô∏è \")",
              "size": 3,
              "title": "Cluster footprint",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "tiles",
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Title",
                  "formatter": 1,
                  "formatOptions": {
                    "palette": "blue",
                    "showIcon": true
                  }
                },
                "subtitleContent": {
                  "columnMatch": "Subtitle",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "leftContent": {
                  "columnMatch": "Content",
                  "formatter": 4,
                  "formatOptions": {
                    "palette": "auto",
                    "showIcon": true
                  }
                },
                "secondaryContent": {
                  "columnMatch": "TotalNodes",
                  "formatter": 4,
                  "formatOptions": {
                    "min": 0,
                    "max": 100,
                    "palette": "pink",
                    "showIcon": true
                  }
                },
                "showBorder": true
              }
            },
            "customWidth": "50",
            "name": "Availability Regions"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "KubeNodeInventory\r\n| where TimeGenerated {timeRange:query}\r\n| extend OS=tostring(parse_json(Labels)[0][\"beta.kubernetes.io/os\"])\r\n| extend Location = tostring(parse_json(Labels)[0]['failure-domain.beta.kubernetes.io/region'])\r\n| summarize  NodeCount=dcount(Computer) by  Location, ClusterName\r\n",
              "size": 0,
              "title": "Azure regions where clusters are available",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "map",
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Location",
                "sizeSettings": "NodeCount",
                "sizeAggregation": "Count",
                "defaultSize": 25,
                "labelSettings": "location",
                "legendMetric": "NodeCount",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "nodeColorField": "NodeCount",
                  "colorAggregation": "Max",
                  "type": "thresholds",
                  "thresholdsGrid": [
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "blue"
                    }
                  ]
                }
              }
            },
            "customWidth": "50",
            "name": "Cluster Locations"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "overview"
      },
      "name": "Overview"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Application Metrics",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "KubePodInventory\r\n|extend d=todynamic(parse_json(PodLabel)[0])\r\n|extend appType=iif(d[\"app\"]!=\"\", d[\"app\"], iif(d[\"component\"]!=\"\", d[\"component\"], iif(d[\"k8s-app\"]!=\"\", d[\"k8s-app\"], ServiceName))),\r\nversion=iif(d[\"app\"]!=\"\", d[\"version\"], \"\")\r\n|project-away d\r\n| where  not (Namespace in ('default', 'kube-system'))\r\n| summarize InstanceCount = dcount(PodUid) by ClusterId, Namespace\r\n//| project ClusterId, appType,Namespace,InstanceCount",
              "size": 0,
              "aggregation": 3,
              "showAnalytics": true,
              "title": "Apps Deployed on Clusters - Choose an app to see more details",
              "exportFieldName": "Namespace",
              "exportParameterName": "selectedAppNamespace",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "table",
              "showExpandCollapseGrid": true,
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "$gen_group",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": "Resource",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "ClusterId",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Namespace",
                    "formatter": 7,
                    "formatOptions": {
                      "linkTarget": "WorkbookTemplate",
                      "linkLabel": ""
                    }
                  },
                  {
                    "columnMatch": "InstanceCount",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "palette": "blue",
                      "aggregation": "Sum"
                    }
                  },
                  {
                    "columnMatch": "appType",
                    "formatter": 5
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "ClusterId"
                  ],
                  "expandTopLevel": true
                }
              },
              "chartSettings": {
                "xAxis": "Namespace",
                "yAxis": [
                  "InstanceCount"
                ],
                "showMetrics": false,
                "showLegend": true
              }
            },
            "name": "Service Instance Counts"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "KubePodInventory\r\n| where TimeGenerated {timeRange:query} and  Namespace =~ '{selectedAppNamespace}' and PodStatus == 'Running'\r\n|extend d=todynamic(parse_json(PodLabel)[0])\r\n|extend appType=iif(d[\"app\"]!=\"\", d[\"app\"], iif(d[\"component\"]!=\"\", d[\"component\"], iif(d[\"k8s-app\"]!=\"\", d[\"k8s-app\"], ServiceName))),\r\nversion=iif(d[\"app\"]!=\"\", d[\"version\"], \"\")\r\n| join kind=inner (\r\n    KubeNodeInventory | extend Location = tostring(parse_json(Labels)[0]['failure-domain.beta.kubernetes.io/region'])\r\n    | summarize count() by Location, ClusterName\r\n) on ClusterName\r\n| summarize podcount=dcount(PodUid) by Location, appType",
              "size": 0,
              "title": "Locations {selectedAppNamespace} is available",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "map",
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Location",
                "sizeSettings": "podcount",
                "sizeAggregation": "Average",
                "maxSize": 50,
                "defaultSize": 0,
                "labelSettings": "Location",
                "legendMetric": "podcount",
                "legendAggregation": "Max",
                "itemColorSettings": {
                  "nodeColorField": "podcount",
                  "colorAggregation": "Max",
                  "type": "heatmap",
                  "heatmapPalette": "purpleBlue"
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "selectedAppNamespace",
              "comparison": "isNotEqualTo"
            },
            "name": "App Available Map"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "KubePodInventory\r\n|extend d=todynamic(parse_json(PodLabel)[0])\r\n|extend appType=iif(d[\"app\"]!=\"\", d[\"app\"], iif(d[\"component\"]!=\"\", d[\"component\"], iif(d[\"k8s-app\"]!=\"\", d[\"k8s-app\"], ServiceName))),\r\nversion=iif(d[\"app\"]!=\"\", d[\"version\"], \"\")\r\n| project-away d\r\n| where TimeGenerated > ago(1h)  and  Namespace =~ '{selectedAppNamespace}' \r\n| summarize Count=dcount(Name) by  ClusterName, Status=PodStatus, version , AppName=appType\r\n| sort by ClusterName asc, version asc",
              "size": 0,
              "title": "{selectedAppNamespace} running in Clusters",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "exportFieldName": "ClusterName",
              "exportParameterName": "selectedClusterForApp",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ClusterName",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "appType",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Region",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  }
                ],
                "hierarchySettings": {
                  "treeType": 1,
                  "groupBy": [
                    "AppName"
                  ],
                  "expandTopLevel": false,
                  "finalBy": "ClusterName"
                },
                "sortBy": [
                  {
                    "itemKey": "Count",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Count",
                  "sortOrder": 1
                }
              ],
              "mapSettings": {
                "locInfo": "AzureLoc",
                "locInfoColumn": "Location",
                "sizeSettings": "Count",
                "sizeAggregation": "Sum",
                "defaultSize": 0,
                "labelSettings": "Location",
                "legendMetric": "Count",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "nodeColorField": "Count",
                  "colorAggregation": "Sum",
                  "type": "heatmap",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "selectedAppNamespace",
              "comparison": "isNotEqualTo"
            },
            "name": "App Availability Table"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "cellValue": "appUsageView",
                  "linkTarget": "parameter",
                  "linkLabel": "App CPU Usage",
                  "subTarget": "cpuView",
                  "preText": "App CPU Usage",
                  "style": "link"
                },
                {
                  "cellValue": "appUsageView",
                  "linkTarget": "parameter",
                  "linkLabel": "App Memory Usage",
                  "subTarget": "memoryView",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "selectedAppNamespace",
              "comparison": "isNotEqualTo"
            },
            "name": "App usage tabs"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\nlet capacityCounterName = 'cpuLimitNanoCores';\r\nlet usageCounterName = 'cpuUsageNanoCores';\r\nlet selectedAppNamespace = '{selectedAppNamespace}';\r\n\r\nlet podsInfo = KubePodInventory\r\n|extend d=todynamic(parse_json(PodLabel)[0])\r\n|extend appType=iif(d[\"app\"]!=\"\", d[\"app\"], iif(d[\"component\"]!=\"\", d[\"component\"], iif(d[\"k8s-app\"]!=\"\", d[\"k8s-app\"], ServiceName))),\r\nversion=iif(d[\"app\"]!=\"\", d[\"version\"], \"\")\r\n| project-away d\r\n| where TimeGenerated {timeRange:query} and Namespace =~ selectedAppNamespace\r\n| extend InstanceName = strcat(ClusterId, '/', ContainerName)\r\n| summarize count() by Computer, InstanceName, Name, ClusterName, appType;\r\n\r\nPerf\r\n| where TimeGenerated{timeRange:query} and ObjectName == 'K8SContainer' and CounterName == capacityCounterName\r\n    | summarize LimitValue=avg(CounterValue) by  Computer, InstanceName\r\n    | join kind=inner\r\n        hint.strategy=shuffle ( \r\n         Perf\r\n        | where TimeGenerated {timeRange:query} and ObjectName == 'K8SContainer' and CounterName == usageCounterName\r\n            | project Computer, InstanceName, UsageValue = CounterValue, TimeGenerated\r\n        )\r\n        on Computer, InstanceName\r\n        | join\r\n            hint.strategy=shuffle (\r\n            podsInfo\r\n        ) on Computer, InstanceName\r\n        | summarize AggregatedValue = avg(UsageValue * 100.0 / LimitValue) by Name, tostring(InstanceName), ClusterName, appType",
              "size": 2,
              "title": "{selectedAppNamespace} CPU Usage",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "appType",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "AggregatedValue",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "bottomContent": {
                  "columnMatch": "Name",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "ClusterName",
                  "formatter": 12,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "InstanceName",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "AggregatedValue",
                  "type": 4,
                  "heatmapPalette": "coldHot",
                  "heatmapMin": 0,
                  "heatmapMax": 80
                },
                "groupByField": "ClusterName",
                "hivesMargin": 5
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedAppNamespace",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "appUsageView",
                "comparison": "isEqualTo",
                "value": "cpuView"
              }
            ],
            "name": "Container CPU Usage"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\nlet capacityCounterName = 'memoryAllocatableBytes';\r\nlet usageCounterName = 'memoryWorkingSetBytes';\r\nlet selectedAppNamespace = '{selectedAppNamespace}';\r\n\r\nlet podsInfo = KubePodInventory\r\n|extend d=todynamic(parse_json(PodLabel)[0])\r\n|extend appType=iif(d[\"app\"]!=\"\", d[\"app\"], iif(d[\"component\"]!=\"\", d[\"component\"], iif(d[\"k8s-app\"]!=\"\", d[\"k8s-app\"], ServiceName))),\r\nversion=iif(d[\"app\"]!=\"\", d[\"version\"], \"\")\r\n| project-away d\r\n| where TimeGenerated {timeRange:query} and Namespace =~ selectedAppNamespace\r\n    | extend InstanceName = strcat(ClusterId, '/', ContainerName)\r\n    | summarize count() by Computer, InstanceName, Name, ClusterName, appType;\r\n\r\nlet limits=Perf\r\n| where TimeGenerated{timeRange:query} and ObjectName == 'K8SNode' and CounterName == capacityCounterName\r\n| summarize LimitValue=avg(CounterValue) by  Computer;\r\n\r\nlet usage =  Perf\r\n| where TimeGenerated{timeRange:query} and  ObjectName == 'K8SContainer' and CounterName == usageCounterName\r\n    | project Computer, InstanceName, UsageValue = CounterValue, TimeGenerated ;\r\n\r\npodsInfo\r\n    | join kind=inner\r\n        hint.strategy=shuffle (  usage)\r\n    on Computer, InstanceName\r\n    | join kind=inner\r\n        hint.strategy=shuffle (  limits)\r\n    on Computer\r\n    | summarize AggregatedValue = avg(UsageValue * 100.0 / LimitValue) by Name, ClusterName, appType",
              "size": 2,
              "title": "{selectedAppNamespace} Memory Usage",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "appType",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "AggregatedValue",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                },
                "bottomContent": {
                  "columnMatch": "Name",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "ClusterName",
                  "formatter": 12,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "Name",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "AggregatedValue",
                  "type": 4,
                  "heatmapPalette": "coldHot",
                  "heatmapMin": 0,
                  "heatmapMax": 80
                },
                "groupByField": "ClusterName",
                "hivesMargin": 5
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedAppNamespace",
                "comparison": "isNotEqualTo"
              },
              {
                "parameterName": "appUsageView",
                "comparison": "isEqualTo",
                "value": "memoryView"
              }
            ],
            "name": "Container CPU Usage - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "applications"
      },
      "name": "ApplicationInfo"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "db383ce8-fd0f-45a8-811b-3af529843e18",
                  "version": "KqlParameterItem/1.0",
                  "name": "metricName",
                  "type": 2,
                  "value": "Memory",
                  "typeSettings": {
                    "additionalResourceOptions": []
                  },
                  "jsonData": "\r\n    [\"CPU\",\"Memory\"]\r\n",
                  "timeContext": {
                    "durationMs": 0
                  },
                  "timeContextFromParameter": "timeRange"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.insights/components"
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "cpu"
            },
            "name": "Node Metric"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "cellValue": "cpuView",
                  "linkTarget": "parameter",
                  "linkLabel": "Hive",
                  "subTarget": "hive",
                  "preText": "Hive",
                  "style": "link"
                },
                {
                  "cellValue": "cpuView",
                  "linkTarget": "parameter",
                  "linkLabel": "Tabular",
                  "subTarget": "tabular",
                  "style": "link"
                }
              ]
            },
            "name": "links - 10"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize=1m;\r\nlet precision =2;\r\nlet calculateUtilization = (usageCounterName: string, allocatableCounterName: string, usageObject: string, allocatableObject: string)\r\n{\r\n    let filterMetric = (counterName: string, objectName: string) {  Perf\r\n    | where ObjectName =~ objectName and CounterName =~ counterName\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), Computer\r\n    | summarize CounterValue = sum(CounterValue) by _ResourceId, TimeGenerated, Computer\r\n};\r\n\r\nfilterMetric(usageCounterName, usageObject)\r\n| project-rename Usage = CounterValue\r\n| join kind=leftouter\r\n(\r\n    filterMetric(allocatableCounterName,allocatableObject)\r\n    | project-rename Available = CounterValue\r\n)\r\non Computer, _ResourceId, TimeGenerated\r\n| project _ResourceId, Computer, TimeGenerated, pct = iff(isempty(Available) or isnull(Available), 0.0, Usage/Available) ,  OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n| summarize percentiles(pct, 50, 75, 95) by _ResourceId, OS\r\n};\r\n\r\n//Calculate cpu & Mem Limit/request relative to total cluster capacity\r\nlet caculateLimitRequestRatio = (limitCounterName: string, requestCounterName: string, capacityCounterName:string)\r\n{\r\n    let filterMetricForSummary = (counterName: string, objectName: string) {  Perf\r\n    | where   ObjectName =~ objectName and CounterName =~ counterName\r\n    and _ResourceId in~ ({selectedCluster})\r\n    | extend OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), OS\r\n    | summarize CounterValue = sum(CounterValue) by  _ResourceId, TimeGenerated , OS\r\n};\r\n\r\nfilterMetricForSummary(limitCounterName,'K8SContainer')\r\n| project-rename Limit=CounterValue\r\n| join\r\n    filterMetricForSummary(requestCounterName,'K8SContainer')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Request=CounterValue\r\n| join\r\n    filterMetricForSummary(capacityCounterName, 'K8SNode')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Capacity=CounterValue\r\n| extend pctLimit=Limit/Capacity, pctRequest=Request/Capacity\r\n| summarize pctLimit=round(100* avg(pctLimit), precision), pctRequest=round(avg(100*pctRequest) ,precision) by _ResourceId, OS\r\n};\r\n\r\nlet utilizationTable = calculateUtilization('cpuUsageNanoCores','cpuAllocatableNanoCores','K8SNode','K8SNode')\r\n| extend p50 = round(100 * percentile_pct_50,precision), p75 = round(100 * percentile_pct_75,precision), p95 = round(100 * percentile_pct_95,precision)\r\n| project-rename ['CPU P50'] = p50, ['CPU P75'] = p75, ['CPU P95'] = p95\r\n| project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n| join\r\n(\r\n    calculateUtilization('memoryWorkingSetBytes', 'memoryAllocatableBytes','K8SContainer','K8SNode')\r\n    | extend p50 = round((100*percentile_pct_50),precision), p75 = round((100 * percentile_pct_75),precision), p95 = round(100 * percentile_pct_95,precision)\r\n    | project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n    | project-rename ['Mem P50'] = p50, ['Mem P75'] = p75, ['Mem P95'] = p95\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1;\r\n\r\nlet limitRequestInfoTable = caculateLimitRequestRatio('cpuLimitNanoCores','cpuRequestNanoCores','cpuAllocatableNanoCores')\r\n| project-rename ['CPU Lim %']=pctLimit,['CPU Req %']=pctRequest\r\n| join\r\n(\r\n    caculateLimitRequestRatio('memoryLimitBytes','memoryRequestBytes','memoryAllocatableBytes')\r\n    | project-rename ['Mem Lim %']=pctLimit,['Mem Req %']=pctRequest\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1,OS1;\r\n\r\nlet clusterVersion = Heartbeat\r\n| distinct _ResourceId, Version;\r\n\r\n// Join all tables together\r\nlimitRequestInfoTable\r\n| join\r\n    utilizationTable\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1\r\n| project-rename Cluster=_ResourceId\r\n| extend OSType = iif(OS =~'linux','üêß ','üñ•Ô∏è')\r\n| project-away OS\r\n| project-rename OS = OSType\r\n| project-reorder  Cluster, OS, ['CPU Req %'],['CPU Lim %'],['CPU P50'],['CPU P75'],['CPU P95'], ['Mem Req %'],['Mem Lim %'],['Mem P50'],['Mem P75'],['Mem P95']\r\n| extend Name = tostring(split(Cluster, \"/\")[-1])\r\n| sort by Name asc , OS asc",
              "size": 3,
              "title": "View {cpuView}",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "exportedParameters": [
                {
                  "fieldName": "Name",
                  "parameterName": "metricForCluster"
                },
                {
                  "parameterType": 1
                }
              ],
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Cluster",
                    "formatter": 13,
                    "formatOptions": {
                      "linkTarget": null,
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "CPU Req %",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "CPU Lim %",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "CPU P50",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false
                      }
                    }
                  },
                  {
                    "columnMatch": "CPU P75",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "minimumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "CPU P95",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Mem Req %",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Mem Lim %",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Mem P50",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Mem P75",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    },
                    "numberFormat": {
                      "unit": 0,
                      "options": {
                        "style": "decimal",
                        "useGrouping": false,
                        "maximumFractionDigits": 2
                      }
                    }
                  },
                  {
                    "columnMatch": "Mem P95",
                    "formatter": 8,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "greenRed",
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "Cluster"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "cpuView",
              "comparison": "isEqualTo",
              "value": "tabular"
            },
            "showPin": true,
            "name": "Cluster Metrics Query"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize=1m;\r\nlet precision =2;\r\nlet calculateUtilization = (usageCounterName: string, allocatableCounterName: string, usageObject: string, allocatableObject: string)\r\n{\r\n    let filterMetric = (counterName: string, objectName: string) {  Perf\r\n    | where ObjectName =~ objectName and CounterName =~ counterName\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), Computer\r\n    | summarize CounterValue = sum(CounterValue) by _ResourceId, TimeGenerated, Computer\r\n};\r\n\r\nfilterMetric(usageCounterName, usageObject)\r\n| project-rename Usage = CounterValue\r\n| join kind=leftouter\r\n(\r\n    filterMetric(allocatableCounterName,allocatableObject)\r\n    | project-rename Available = CounterValue\r\n)\r\non Computer, _ResourceId, TimeGenerated\r\n| project _ResourceId, Computer, TimeGenerated, pct = iff(isempty(Available) or isnull(Available), 0.0, Usage/Available) ,  OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n| summarize percentiles(pct, 50, 75, 95) by _ResourceId, OS\r\n};\r\n\r\n//Calculate cpu & Mem Limit/request relative to total cluster capacity\r\nlet caculateLimitRequestRatio = (limitCounterName: string, requestCounterName: string, capacityCounterName:string)\r\n{\r\n    let filterMetricForSummary = (counterName: string, objectName: string) {  Perf\r\n    | where   ObjectName =~ objectName and CounterName =~ counterName and _ResourceId in~ ({selectedCluster})\r\n    | extend OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), OS\r\n    | summarize CounterValue = sum(CounterValue) by  _ResourceId, TimeGenerated , OS\r\n};\r\n\r\nfilterMetricForSummary(limitCounterName,'K8SContainer')\r\n| project-rename Limit=CounterValue\r\n| join\r\n    filterMetricForSummary(requestCounterName,'K8SContainer')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Request=CounterValue\r\n| join\r\n    filterMetricForSummary(capacityCounterName, 'K8SNode')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Capacity=CounterValue\r\n| extend pctLimit=Limit/Capacity, pctRequest=Request/Capacity\r\n| summarize pctLimit=round(100* avg(pctLimit), precision), pctRequest=round(avg(100*pctRequest) ,precision) by _ResourceId, OS\r\n};\r\n\r\nlet utilizationTable = calculateUtilization('cpuUsageNanoCores','cpuAllocatableNanoCores','K8SNode','K8SNode')\r\n| extend p50 = round(100 * percentile_pct_50,precision), p75 = round(100 * percentile_pct_75,precision), p95 = round(100 * percentile_pct_95,precision)\r\n| project-rename ['CPU P50'] = p50, ['CPU P75'] = p75, ['CPU P95'] = p95\r\n| project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n| join\r\n(\r\n    calculateUtilization('memoryWorkingSetBytes', 'memoryAllocatableBytes','K8SContainer','K8SNode')\r\n    | extend p50 = round((100*percentile_pct_50),precision), p75 = round((100 * percentile_pct_75),precision), p95 = round(100 * percentile_pct_95,precision)\r\n    | project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n    | project-rename ['Memory P50'] = p50, ['Memory P75'] = p75, ['Memory P95'] = p95\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1;\r\n\r\nlet limitRequestInfoTable = caculateLimitRequestRatio('cpuLimitNanoCores','cpuRequestNanoCores','cpuAllocatableNanoCores')\r\n| project-rename ['CPU Lim %']=pctLimit,['CPU Req %']=pctRequest\r\n| join\r\n(\r\n    caculateLimitRequestRatio('memoryLimitBytes','memoryRequestBytes','memoryAllocatableBytes')\r\n    | project-rename ['Mem Lim %']=pctLimit,['Mem Req %']=pctRequest\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1,OS1;\r\n\r\nlet clusterVersion = Heartbeat\r\n| distinct _ResourceId, Version;\r\n\r\n// Join all tables together\r\nlimitRequestInfoTable\r\n| join\r\n    utilizationTable\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1\r\n| project-rename Cluster=_ResourceId\r\n| extend OSType = iif(OS =~'linux','üêß ','üñ•Ô∏è')\r\n| project-reorder  Cluster, OS, ['CPU Req %'],['CPU Lim %'],['CPU P50'],['CPU P75'],['CPU P95'], ['Mem Req %'],['Mem Lim %'],['Memory P50'],['Memory P75'],['Memory P95'], OSType\r\n| extend Name = tostring(split(Cluster, \"/\")[-1])\r\n| extend DisplayValue = ['{metricName} P50']\r\n| sort by Name asc , OS asc",
              "size": 0,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Average Cluster {metricName} Utilization%",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "Name",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "leftContent": {
                  "columnMatch": "left",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "DisplayValue",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 2
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "Region",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "bottomContent": {
                  "columnMatch": "OS",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "OS",
                  "formatter": 12,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "Cluster",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "CPU P50",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": 0,
                  "heatmapMax": 100
                },
                "groupByField": "OS",
                "hivesMargin": 2
              }
            },
            "conditionalVisibility": {
              "parameterName": "cpuView",
              "comparison": "isNotEqualTo",
              "value": "tabular"
            },
            "name": "cpu utilization table"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let capacityCounterName = \"cpuAllocatableNanoCores\";\r\nlet usageCounterName = \"cpuUsageNanoCores\";\r\nKubeNodeInventory\r\n| where TimeGenerated {timeRange:query}\r\n| extend OS=tostring(parse_json(Labels)[0][\"beta.kubernetes.io/os\"])\r\n| distinct ClusterName, ClusterId, Computer , OS\r\n| project  InstanceName = strcat(ClusterId, \"/\", Computer), ClusterName, Computer , OS\r\n| join hint.strategy=shuffle (\r\n    Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName =~ \"K8sNode\"\r\n    | where CounterName =~ capacityCounterName\r\n    | project Computer, InstanceName, AllocatableInBytes = CounterValue \r\n    ) on InstanceName\r\n    | join kind=inner hint.strategy=shuffle (\r\n        Perf\r\n        | where TimeGenerated {timeRange:query}\r\n        | where ObjectName =~ \"K8sNode\"\r\n        | where CounterName =~ usageCounterName\r\n        | project TimeGenerated, Computer, InstanceName, UsageInBytes = CounterValue\r\n    ) on InstanceName \r\n| project TimeGenerated, Computer, UsageInBytes , AllocatableInBytes, InstanceName, ClusterName, UsagePercent = UsageInBytes * 100 / AllocatableInBytes, OS\r\n| extend ComputerId = strcat(OS,\"|\", ClusterName, \"/\",Computer)\r\n| extend pct = (UsageInBytes*100 /AllocatableInBytes)\r\n| summarize percentiles(pct, 5, 50, 75, 95) by ComputerId\r\n| extend NodeName= split(ComputerId,\"/\")[1], Cluster= split(split(ComputerId, \"/\")[0],\"|\")\r\n| extend OS = Cluster[0], Name = Cluster[1]",
              "size": 2,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Average Cluster CPU Utilization% - Select a node to see more details",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "exportedParameters": [
                {
                  "fieldName": "NodeName",
                  "parameterName": "hiveSelectedNode",
                  "parameterType": 1
                },
                {
                  "fieldName": "Name",
                  "parameterName": "hiveSelectedCluster",
                  "parameterType": 1
                }
              ],
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "NodeName",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "percentile_pct_50",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "bottomContent": {
                  "columnMatch": "OS",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "Name",
                  "formatter": 12,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "NodeName",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "percentile_pct_50",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": 0,
                  "heatmapMax": 100,
                  "emptyValueColor": "orange"
                },
                "groupByField": "Name",
                "hivesMargin": 2
              },
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "dev-d01-nam-westus2-aks/aksap000000",
                    "label": "dev-westu2"
                  }
                ],
                "ySettings": {
                  "unit": 1,
                  "min": null,
                  "max": null
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "selectedTab",
                "comparison": "isEqualTo",
                "value": "cpu"
              },
              {
                "parameterName": "metricName",
                "comparison": "isEqualTo",
                "value": "CPU"
              }
            ],
            "showPin": true,
            "name": "cpu utilization per node",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let capacityCounterName = \"memoryAllocatableBytes\";\r\nlet usageCounterName = \"memoryWorkingSetBytes\";\r\nKubeNodeInventory\r\n| where TimeGenerated {timeRange:query}\r\n| extend OS=tostring(parse_json(Labels)[0][\"beta.kubernetes.io/os\"])\r\n| distinct ClusterName, ClusterId, Computer , OS\r\n| extend fields = split(ClusterName, \"-\")\r\n| project Ring = fields[1], Silo = fields [2], Region = fields[3], InstanceName = strcat(ClusterId, \"/\", Computer), ClusterName, Computer , OS\r\n| join hint.strategy=shuffle (\r\n    Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName =~ \"K8sNode\"\r\n    | where CounterName =~ capacityCounterName\r\n    | project Computer, InstanceName, AllocatableInBytes = CounterValue \r\n    ) on InstanceName\r\n    | join kind=inner hint.strategy=shuffle (\r\n        Perf\r\n        | where TimeGenerated {timeRange:query}\r\n        | where ObjectName =~ \"K8sNode\"\r\n        | where CounterName =~ usageCounterName\r\n        | project TimeGenerated, Computer, InstanceName, UsageInBytes = CounterValue\r\n    ) on InstanceName \r\n| project TimeGenerated, Computer, UsageInBytes , AllocatableInBytes, InstanceName, ClusterName, UsagePercent = UsageInBytes * 100 / AllocatableInBytes, OS\r\n| extend ComputerId = strcat(ClusterName, \"/\",Computer)\r\n| extend pct = (UsageInBytes*100 /AllocatableInBytes)\r\n| summarize percentiles(pct, 5, 50, 75, 95) by ComputerId\r\n| extend fields = split(ComputerId,\"/\")\r\n| extend NodeName= tostring(fields[1]), Cluster= tostring(fields[0])\r\n| extend value = strcat(tostring(percentile_pct_50),\"/\",tostring(percentile_pct_75),\"/\",tostring(percentile_pct_95))",
              "size": 2,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Average Node Memory Utilization% - Select a node to see more details",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "exportedParameters": [
                {
                  "fieldName": "NodeName",
                  "parameterName": "hiveSelectedNode",
                  "parameterType": 1
                },
                {
                  "fieldName": "Cluster",
                  "parameterName": "hiveSelectedCluster",
                  "parameterType": 1
                }
              ],
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "NodeName",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "leftContent": {
                  "columnMatch": "Ring",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "percentile_pct_50",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "Silo",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "bottomContent": {
                  "columnMatch": "Name",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "Cluster",
                  "formatter": 12,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "ComputerId",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "percentile_pct_50",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": 0,
                  "heatmapMax": 100,
                  "emptyValueColor": "orange"
                },
                "groupByField": "Cluster",
                "hivesMargin": 2
              },
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "dev-d01-nam-westus2-aks/aksap000000",
                    "label": "dev-westu2"
                  }
                ],
                "ySettings": {
                  "unit": 1,
                  "min": null,
                  "max": null
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "metricName",
              "comparison": "isEqualTo",
              "value": "Memory"
            },
            "showPin": true,
            "name": "mem utilization hive "
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let capacityCounterName = \"cpuAllocatableNanoCores\";\r\nlet usageCounterName = \"cpuUsageNanoCores\";\r\nKubePodInventory\r\n| where TimeGenerated {timeRange:query}\r\n| distinct ClusterName, ClusterId, Computer\r\n| project ClusterName, Computer, InstanceName = strcat(ClusterId, \"/\", Computer) \r\n| join hint.strategy=shuffle (\r\n    Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName =~ \"K8sNode\"\r\n    | where CounterName =~ capacityCounterName\r\n    | project Computer, InstanceName, AllocatableInBytes = CounterValue \r\n    ) on InstanceName\r\n    | join kind=inner hint.strategy=shuffle (\r\n        Perf\r\n        | where TimeGenerated {timeRange:query}\r\n        | where ObjectName =~ \"K8sNode\"\r\n        | where CounterName =~ usageCounterName\r\n        | project TimeGenerated, Computer, InstanceName, UsageInBytes = CounterValue\r\n    ) on InstanceName \r\n| project TimeGenerated, Computer, UsageInBytes , AllocatableInBytes, InstanceName, ClusterName, UsagePercent = UsageInBytes * 100 / AllocatableInBytes\r\n| extend ComputerId = strcat(ClusterName , \"/\", Computer)\r\n| where '{hiveSelectedCluster}' contains ClusterName and ComputerId contains '{hiveSelectedNode}'\r\n| summarize avg = (avg(UsageInBytes) * 100 / avg(AllocatableInBytes) )by bin(TimeGenerated, 1m) , ComputerId\r\n",
              "size": 1,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Node CPU Utilization% - Cluster : {hiveSelectedCluster} Node: {hiveSelectedNode} ",
              "noDataMessage": "No cluster selected ",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "linechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "hiveSelectedNode",
              "comparison": "isNotEqualTo"
            },
            "showPin": true,
            "name": "cpu node query"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\nlet allocatableCounterName = 'memoryAllocatableBytes';\r\nlet usageCounterName = 'memoryWorkingSetBytes';\r\n\r\nlet filterMetric = (counterName:string, objectName: string) {\r\n    Perf \r\n    | where TimeGenerated {timeRange:query} and ObjectName =~ objectName and CounterName =~ counterName and _ResourceId contains '{hiveSelectedCluster}'\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), Computer\r\n    | summarize CounterValue = sum(CounterValue) by _ResourceId, TimeGenerated, Computer\r\n};\r\n\r\nfilterMetric(usageCounterName, 'K8SContainer')\r\n| join kind=leftouter filterMetric(allocatableCounterName, 'K8SNode') on TimeGenerated, _ResourceId, Computer\r\n| project _ResourceId, Computer, TimeGenerated, UsagePercent = iff(isempty(CounterValue) or isnull(CounterValue), 0.0, 100*CounterValue / CounterValue1)\r\n| summarize TimeGenerated=make_list(TimeGenerated), UsagePercent=make_list(UsagePercent) by Computer, _ResourceId\r\n| where _ResourceId contains_cs '{hiveSelectedCluster}' and Computer contains '{hiveSelectedNode}'\r\n| project Computer, UsagePercent, TimeGenerated\r\n| sort by Computer asc",
              "size": 1,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Memory Utilization% - Node: {hiveSelectedNode} Cluster : {hiveSelectedCluster}",
              "noDataMessage": "No cluster selected ",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "linechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "hiveSelectedNode",
              "comparison": "isNotEqualTo"
            },
            "showPin": true,
            "name": "memory node query"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\n\r\nKubePodInventory\r\n| where TimeGenerated {timeRange:query} and ClusterId contains '{hiveSelectedCluster}' and '{hiveSelectedNode}' contains Computer \r\n| extend InstanceName=strcat(ClusterId,'/',ContainerName)\r\n| summarize arg_max(TimeGenerated, ContainerStatus) by Namespace, Name, InstanceName\r\n| extend TimeFromNow = now() - TimeGenerated\r\n| extend TimeAgo = strcat('üïí', case(TimeFromNow < 2m, strcat(toint(TimeFromNow / 1s), 's'), TimeFromNow < 2h, strcat(toint(TimeFromNow / 1m), 'm'), TimeFromNow < 2d, strcat(toint(TimeFromNow / 1h), 'h'), strcat(toint(TimeFromNow / 1d), 'd')), ' ago')\r\n| project Namespace,['Last Seen']=TimeAgo,PodName=Name,InstanceName,ContainerName=split(InstanceName,'/')[-1],Status=strcat(iff(ContainerStatus=~'Running' or ContainerStatus=~'Succeeded', '‚úîÔ∏è', '‚ùå'),ContainerStatus)\r\n| sort by PodName asc\r\n| project Namespace,['Pod Name']=PodName,['Container Name']=ContainerName, Status,['Last Seen'], PodName",
              "size": 1,
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "exportMultipleValues": true,
              "exportedParameters": [
                {
                  "fieldName": "PodName",
                  "parameterName": "selectedPodNames",
                  "parameterType": 1
                }
              ],
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Container Name",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  },
                  {
                    "columnMatch": "PodName",
                    "formatter": 5,
                    "formatOptions": {
                      "showIcon": true
                    }
                  }
                ],
                "filter": true
              }
            },
            "conditionalVisibility": {
              "parameterName": "hiveSelectedNode",
              "comparison": "isNotEqualTo"
            },
            "showPin": true,
            "name": "Pod Info"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\nlet capacityCounterName = 'cpuLimitNanoCores';\r\nlet usageCounterName = 'cpuUsageNanoCores';\r\n//let selectedPods = iif(isempty({selectedPodNames}), '', {selectedPodNames});\r\n\r\nlet podsInfo = KubePodInventory\r\n| where TimeGenerated {timeRange:query} and Computer contains '{hiveSelectedNode}' and ClusterId contains '{hiveSelectedCluster}' \r\n| extend InstanceName = strcat(ClusterId, '/', ContainerName), Name\r\n//| where Name in~ (selectedPods)\r\n| summarize count() by  InstanceName, Name;\r\n\r\npodsInfo\r\n| join hint.strategy=shuffle (\r\n  Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName == 'K8SContainer' and CounterName == capacityCounterName\r\n    and Computer contains '{hiveSelectedNode}'\r\n    | project InstanceName, LimitValue = CounterValue\r\n) on  InstanceName\r\n| join kind=inner hint.strategy=shuffle (\r\n    Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName == 'K8SContainer' and CounterName == usageCounterName and Computer contains '{hiveSelectedNode}'\r\n    | project Computer, InstanceName, UsageValue = CounterValue, TimeGenerated\r\n) on InstanceName\r\n| project Computer, TimeGenerated, UsagePercent = (UsageValue * 100.0) / LimitValue, InstanceName , Name//, Path\r\n| summarize AggregatedValue = avg(UsagePercent) by Name, length=bin(TimeGenerated, trendBinSize) ",
              "size": 0,
              "aggregation": 3,
              "title": "Container CPU Utilization - Node: {hiveSelectedNode} - Cluster : {hiveSelectedCluster} ",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "linechart",
              "chartSettings": {
                "yAxis": [
                  "AggregatedValue"
                ],
                "showLegend": true
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "hiveSelectedNode",
              "comparison": "isNotEqualTo"
            },
            "name": "Container CPU Utilization"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize = 1m;\r\nlet capacityCounterName = 'memoryAllocatableBytes';\r\nlet usageCounterName = 'memoryWorkingSetBytes';\r\n//let selectedPods = iif(isempty({selectedPodNames}), '', {selectedPodNames});\r\n\r\nlet Limit=toscalar(Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName == 'K8SNode' and CounterName == capacityCounterName  and InstanceName has '{hiveSelectedCluster}'  and Computer contains '{hiveSelectedNode}' | take 1\r\n    | project CounterValue);\r\n\r\nlet podsInfo = KubePodInventory\r\n| where TimeGenerated {timeRange:query} and Computer contains '{hiveSelectedNode}' and ClusterId contains '{hiveSelectedCluster}' \r\n| extend InstanceName = strcat(ClusterId, '/', ContainerName), Name\r\n| summarize count() by  InstanceName, Computer, Name;\r\n\r\nPerf\r\n| where TimeGenerated {timeRange:query}\r\n| where ObjectName == 'K8SContainer' and CounterName == usageCounterName  and InstanceName has '{hiveSelectedCluster}' and Computer contains '{hiveSelectedNode}'\r\n| summarize Usage = avg((100*CounterValue) / Limit) by InstanceName, Computer , bin(TimeGenerated, trendBinSize)\r\n|join kind=inner (\r\n    podsInfo\r\n) on InstanceName\r\n|project Usage, Name, TimeGenerated",
              "size": 0,
              "aggregation": 3,
              "title": "Container Memory Utilization - Node: {hiveSelectedNode} - Cluster : {hiveSelectedCluster} ",
              "timeContext": {
                "durationMs": 14400000
              },
              "timeContextFromParameter": "timeRange",
              "queryType": 0,
              "resourceType": "microsoft.containerservice/managedclusters",
              "crossComponentResources": [
                "{selectedCluster}"
              ],
              "visualization": "linechart",
              "chartSettings": {
                "xAxis": "TimeGenerated",
                "showLegend": true
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "hiveSelectedNode",
              "comparison": "isNotEqualTo"
            },
            "name": "Container CPU Utilization - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "cpu"
      },
      "name": "cpu-metrics-group"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let trendBinSize=1m;\r\nlet precision =2;\r\nlet calculateUtilization = (usageCounterName: string, allocatableCounterName: string, usageObject: string, allocatableObject: string)\r\n{\r\n    let filterMetric = (counterName: string, objectName: string) {  Perf\r\n    | where ObjectName =~ objectName and CounterName =~ counterName\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), Computer\r\n    | summarize CounterValue = sum(CounterValue) by _ResourceId, TimeGenerated, Computer\r\n};\r\n\r\nfilterMetric(usageCounterName, usageObject)\r\n| project-rename Usage = CounterValue\r\n| join kind=leftouter\r\n(\r\n    filterMetric(allocatableCounterName,allocatableObject)\r\n    | project-rename Available = CounterValue\r\n)\r\non Computer, _ResourceId, TimeGenerated\r\n| project _ResourceId, Computer, TimeGenerated, pct = iff(isempty(Available) or isnull(Available), 0.0, Usage/Available) ,  OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n| summarize percentiles(pct, 50, 75, 95) by _ResourceId, OS\r\n};\r\n\r\n//Calculate cpu & Mem Limit/request relative to total cluster capacity\r\nlet caculateLimitRequestRatio = (limitCounterName: string, requestCounterName: string, capacityCounterName:string)\r\n{\r\n    let filterMetricForSummary = (counterName: string, objectName: string) {  Perf\r\n    | where   ObjectName =~ objectName and CounterName =~ counterName and _ResourceId in~ ({selectedCluster})\r\n    | extend OS = iif(Computer contains_cs \"agentpool\" , \"linux\", \"windows\")\r\n    | summarize CounterValue = avg(CounterValue) by InstanceName, _ResourceId, bin(TimeGenerated, trendBinSize), OS\r\n    | summarize CounterValue = sum(CounterValue) by  _ResourceId, TimeGenerated , OS\r\n};\r\n\r\nfilterMetricForSummary(limitCounterName,'K8SContainer')\r\n| project-rename Limit=CounterValue\r\n| join\r\n    filterMetricForSummary(requestCounterName,'K8SContainer')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Request=CounterValue\r\n| join\r\n    filterMetricForSummary(capacityCounterName, 'K8SNode')\r\non _ResourceId, TimeGenerated, OS\r\n| project-rename Capacity=CounterValue\r\n| extend pctLimit=Limit/Capacity, pctRequest=Request/Capacity\r\n| summarize pctLimit=round(100* avg(pctLimit), precision), pctRequest=round(avg(100*pctRequest) ,precision) by _ResourceId, OS\r\n};\r\n\r\nlet utilizationTable = calculateUtilization('cpuUsageNanoCores','cpuAllocatableNanoCores','K8SNode','K8SNode')\r\n| extend p50 = round(100 * percentile_pct_50,precision), p75 = round(100 * percentile_pct_75,precision), p95 = round(100 * percentile_pct_95,precision)\r\n| project-rename ['CPU P50'] = p50, ['CPU P75'] = p75, ['CPU P95'] = p95\r\n| project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n| join\r\n(\r\n    calculateUtilization('memoryWorkingSetBytes', 'memoryAllocatableBytes','K8SContainer','K8SNode')\r\n    | extend p50 = round((100*percentile_pct_50),precision), p75 = round((100 * percentile_pct_75),precision), p95 = round(100 * percentile_pct_95,precision)\r\n    | project-away percentile_pct_50, percentile_pct_75, percentile_pct_95\r\n    | project-rename ['Mem P50'] = p50, ['Mem P75'] = p75, ['Mem P95'] = p95\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1;\r\n\r\nlet limitRequestInfoTable = caculateLimitRequestRatio('cpuLimitNanoCores','cpuRequestNanoCores','cpuAllocatableNanoCores')\r\n| project-rename ['CPU Lim %']=pctLimit,['CPU Req %']=pctRequest\r\n| join\r\n(\r\n    caculateLimitRequestRatio('memoryLimitBytes','memoryRequestBytes','memoryAllocatableBytes')\r\n    | project-rename ['Mem Lim %']=pctLimit,['Mem Req %']=pctRequest\r\n)\r\non _ResourceId, OS\r\n| project-away _ResourceId1,OS1;\r\n\r\nlet clusterVersion = Heartbeat\r\n| distinct _ResourceId, Version;\r\n\r\n// Join all tables together\r\nlimitRequestInfoTable\r\n| join\r\n    utilizationTable\r\non _ResourceId, OS\r\n| project-away _ResourceId1, OS1\r\n| project-rename Cluster=_ResourceId\r\n| extend OSType = iif(OS =~'linux','üêß ','üñ•Ô∏è')\r\n| project-reorder  Cluster, OS, ['CPU Req %'],['CPU Lim %'],['CPU P50'],['CPU P75'],['CPU P95'], ['Mem Req %'],['Mem Lim %'],['Mem P50'],['Mem P75'],['Mem P95'], OSType\r\n| extend Name = tostring(split(Cluster, \"/\")[-1])\r\n| sort by Name asc , OS asc",
              "size": 0,
              "showAnnotations": true,
              "title": "Average Cluster Menmory Utilization%",
              "timeContext": {
                "durationMs": 0
              },
              "timeContextFromParameter": "timeRange",
              "exportFieldName": "ClusterName",
              "exportParameterName": "memoryHiveSelectedCluster",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "Ring",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "leftContent": {
                  "columnMatch": "Silo",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "percentile_pct_50",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "Region",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "bottomContent": {
                  "columnMatch": "Name",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "hivesContent": {
                  "columnMatch": "ClusterName",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "ClusterName",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "percentile_pct_50",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": 0,
                  "heatmapMax": 100
                },
                "groupByField": "ClusterName",
                "hivesMargin": 2
              }
            },
            "name": "cluster memory utilization"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let capacityCounterName = \"memoryAllocatableBytes\";\r\nlet usageCounterName = \"memoryWorkingSetBytes\";\r\nKubeNodeInventory\r\n| where TimeGenerated {timeRange:query}\r\n| extend OS=tostring(parse_json(Labels)[0][\"beta.kubernetes.io/os\"])\r\n| distinct ClusterName, ClusterId, Computer , OS\r\n| extend fields = split(ClusterName, \"-\")\r\n| project Ring = fields[1], Silo = fields [2], Region = fields[3], InstanceName = strcat(ClusterId, \"/\", Computer), ClusterName, Computer , OS\r\n| join hint.strategy=shuffle (\r\n    Perf\r\n    | where TimeGenerated {timeRange:query}\r\n    | where ObjectName =~ \"K8sNode\"\r\n    | where CounterName =~ capacityCounterName\r\n    | project Computer, InstanceName, AllocatableInBytes = CounterValue \r\n    ) on InstanceName\r\n    | join kind=inner hint.strategy=shuffle (\r\n        Perf\r\n        | where TimeGenerated {timeRange:query}\r\n        | where ObjectName =~ \"K8sNode\"\r\n        | where CounterName =~ usageCounterName\r\n        | project TimeGenerated, Computer, InstanceName, UsageInBytes = CounterValue\r\n    ) on InstanceName \r\n| project TimeGenerated, Computer, UsageInBytes , AllocatableInBytes, InstanceName, ClusterName, UsagePercent = UsageInBytes * 100 / AllocatableInBytes, OS\r\n| extend ComputerId = strcat(ClusterName, \"/\",Computer)\r\n| extend pct = (UsageInBytes*100 /AllocatableInBytes)\r\n| summarize percentiles(pct, 5, 50, 75, 95) by ComputerId\r\n| extend fields = split(ComputerId,\"/\")\r\n| extend NodeName= tostring(fields[1]), Cluster= tostring(fields[0])\r\n| extend value = strcat(tostring(percentile_pct_50),\"/\",tostring(percentile_pct_75),\"/\",tostring(percentile_pct_95))",
              "size": 3,
              "aggregation": 3,
              "showAnnotations": true,
              "title": "Average Node MeM Utilization%",
              "timeContext": {
                "durationMs": 0
              },
              "timeContextFromParameter": "timeRange",
              "exportMultipleValues": true,
              "exportedParameters": [
                {
                  "fieldName": "ComputerId",
                  "parameterName": "cpuHiveSelectedNode"
                }
              ],
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "graph",
              "graphSettings": {
                "type": 2,
                "topContent": {
                  "columnMatch": "NodeName",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "leftContent": {
                  "columnMatch": "Ring",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "centerContent": {
                  "columnMatch": "percentile_pct_50",
                  "formatter": 1,
                  "formatOptions": {
                    "showIcon": true
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2,
                      "maximumSignificantDigits": 3
                    }
                  }
                },
                "rightContent": {
                  "columnMatch": "Silo",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "bottomContent": {
                  "columnMatch": "Name",
                  "formatOptions": {
                    "showIcon": true
                  }
                },
                "nodeIdField": "ComputerId",
                "nodeSize": null,
                "staticNodeSize": 100,
                "colorSettings": {
                  "nodeColorField": "percentile_pct_50",
                  "type": 4,
                  "heatmapPalette": "greenRed",
                  "heatmapMin": 0,
                  "heatmapMax": 100,
                  "emptyValueColor": "orange"
                },
                "hivesMargin": 2
              },
              "chartSettings": {
                "seriesLabelSettings": [
                  {
                    "seriesName": "dev-d01-nam-westus2-aks/aksap000000",
                    "label": "dev-westu2"
                  }
                ],
                "ySettings": {
                  "unit": 1,
                  "min": null,
                  "max": null
                }
              }
            },
            "conditionalVisibility": {
              "parameterName": "selectedTab",
              "comparison": "isEqualTo",
              "value": "memory"
            },
            "showPin": true,
            "name": "mem utilization hive "
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "memory"
      },
      "name": "Memory Utilization Group"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let data = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'disk' or Namespace =~ 'container.azm.ms/disk'\r\n| where Name == 'used_percent' or Name == 'free'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), Device = strcat('/dev/', tostring(Tags.device)), ClusterName = tostring(Tags.[\"container.azm.ms/clusterId\"])\r\n| where ClusterName in ({selectedCluster})\r\n| extend NodeDisk = strcat(HostName, Device);\r\nlet usedPercent = data\r\n| where Name == 'used_percent';\r\nlet free = data\r\n| where Name == 'free';\r\nlet worstDisksPerNode = usedPercent\r\n| partition by HostName (\r\n    summarize UsedPercent = max(Val) by HostName, Device, NodeDisk\r\n    | top 1 by UsedPercent desc\r\n);\r\nusedPercent // used percent for devices\r\n| summarize UsedPercent = max(Val) by HostName, Device\r\n| join kind = inner (\r\n    usedPercent \r\n    | make-series UsedPercentTrend = max(Val) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n) on HostName\r\n| where Device == Device1\r\n| project Id = strcat(HostName, Device), Name = strcat('üîπ ', Device), ParentId = HostName, Kind = 'Device', UsedPercent, UsedPercentTrend\r\n| union ( // used percent for nodes\r\n    usedPercent\r\n    | summarize UsedPercent = max(Val) by HostName\r\n    | join kind = inner (\r\n        usedPercent \r\n        | make-series UsedPercentTrend = max(Val) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName\r\n    ) on HostName\r\n    | project Id = HostName, Name = strcat('üñ•Ô∏è ', HostName), ParentId = '', Kind = 'Node', UsedPercent, UsedPercentTrend\r\n)\r\n| join kind = inner (\r\n    free // free space for devices\r\n    | summarize Free = min(Val) by HostName, Device\r\n    | join kind = inner (\r\n        free    \r\n        | make-series FreeTrend = min(Val) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n    ) on HostName\r\n    | where Device == Device1\r\n    | project Id = strcat(HostName, Device), Name = Device, ParentId = HostName, Kind = 'Device', Free, FreeTrend\r\n    | union ( // free space for nodes\r\n        free\r\n        | summarize Free = min(Val) by HostName, Device\r\n        | join kind = inner ( // match the set of node-disk free space data to the nodes with the worst used percent data for setting the data in the node rows\r\n            worstDisksPerNode\r\n        ) on HostName, Device\r\n        | join kind = inner (\r\n            free \r\n            | make-series FreeTrend = min(Val) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step  {timeRange:grain} by HostName, Device\r\n            | join kind = inner (\r\n                worstDisksPerNode\r\n            ) on HostName, Device\r\n        ) on HostName\r\n        | project Id = HostName, Name = HostName, ParentId = '', Kind = 'Node', Free, FreeTrend\r\n    )\r\n) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1\r\n| project-rename ['Used Disk % (Max)'] = UsedPercent, ['Used Disk % Trend (Max)'] = UsedPercentTrend, ['Free Disk Space (Min)'] = Free, ['Free Disk Space Trend (Min)'] = FreeTrend\r\n| order by ['Used Disk % (Max)'] desc, Name asc",
        "size": 1,
        "showAnalytics": true,
        "title": "Disk Capacity Overview",
        "timeContext": {
          "durationMs": 14400000
        },
        "timeContextFromParameter": "timeRange",
        "exportParameterName": "selectedRow",
        "exportDefaultValue": "{\"Kind\":\"Unselected\"}",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters",
        "crossComponentResources": [
          "{selectedCluster}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Id",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "ParentId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Kind",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Used Disk % (Max)",
              "formatter": 18,
              "formatOptions": {
                "showIcon": true,
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": ">=",
                    "thresholdValue": "90",
                    "representation": "2"
                  },
                  {
                    "operator": ">=",
                    "thresholdValue": "99",
                    "representation": "4",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              },
              "numberFormat": {
                "unit": 1,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 1
                }
              }
            },
            {
              "columnMatch": "Used Disk % Trend (Max)",
              "formatter": 9,
              "formatOptions": {
                "min": 0,
                "max": 100,
                "palette": "greenRed",
                "showIcon": true
              }
            },
            {
              "columnMatch": "Free Disk Space (Min)",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 1
                }
              }
            },
            {
              "columnMatch": "Free Disk Space Trend (Min)",
              "formatter": 9,
              "formatOptions": {
                "min": 0,
                "palette": "blueDark",
                "showIcon": true
              }
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "idColumn": "Id",
            "parentColumn": "ParentId",
            "treeType": 0,
            "expanderColumn": "Name",
            "expandTopLevel": true
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "io"
      },
      "showPin": true,
      "name": "Disk Capacity Overview"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let data = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/diskio'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), Device = strcat('/dev/', tostring(Tags.name)), ClusterName = tostring(Tags.[\"container.azm.ms/clusterId\"])\r\n| where ClusterName in ({selectedCluster})\r\n| extend NodeDisk = strcat(HostName, Device)\r\n| extend partitionKey = strcat(NodeDisk, '/', Name)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val, Val - PrevVal)\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, PrevTimeGenerated, HostName, Device, NodeDisk, Name, Rate, Val;\r\nlet bytesRead = data\r\n| where Name == 'read_bytes'\r\n| extend Rate = Rate / datetime_diff('Second', TimeGenerated, PrevTimeGenerated);\r\nlet msPerByteRead = data\r\n| where Name == 'read_bytes'\r\n| extend Rate = (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1000) / Rate;\r\nlet bytesWritten = data\r\n| where Name == 'write_bytes'\r\n| extend Rate = Rate / datetime_diff('Second', TimeGenerated, PrevTimeGenerated);\r\nlet msPerByteWritten = data\r\n| where Name == 'write_bytes'\r\n| extend Rate = (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1000) / Rate;\r\nlet iopsInFlight = data\r\n| where Name == 'iops_in_progress'\r\n| extend Rate = Val;\r\nlet diskBusy = data\r\n| where Name == 'io_time'\r\n| extend Rate = iif(TimeGenerated == PrevTimeGenerated, 0.0, Rate / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1000));\r\nlet maxOn = -1;\r\nlet avgOn = -1;\r\nlet minOn = -1;\r\nlet bytesReadTableData = bytesRead // bytes read per sec \r\n| summarize BytesReadPerSecond = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) by HostName, Device // for devices, group by parentId (HostName) in workbook config\r\n| join kind = inner (\r\n    bytesRead\r\n    | make-series BytesReadPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n) on HostName\r\n| where Device == Device1\r\n| project Id = strcat(HostName, Device), HostName, Device, Name = strcat('üîπ ', Device), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Device', BytesReadPerSecond, BytesReadPerSecondTrend;\r\nlet bytesWrittenTableData = bytesWritten // bytes witten per sec \r\n| summarize BytesWrittenPerSecond = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) by HostName, Device // for devices\r\n| join kind = inner (\r\n    bytesWritten\r\n    | make-series BytesWrittenPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n) on HostName\r\n| where Device == Device1\r\n| project Id = strcat(HostName, Device), HostName, Device, Name = strcat('üîπ ', Device), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Device', BytesWrittenPerSecond, BytesWrittenPerSecondTrend;\r\nlet diskBusyTableData = diskBusy // disk busy\r\n| summarize DiskBusy = max(Rate) by HostName, Device // for devices, group by parentId (HostName) in workbook config\r\n| join kind = inner (\r\n    diskBusy\r\n    | make-series DiskBusyTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n) on HostName\r\n| where Device == Device1\r\n| project Id = strcat(HostName, Device), HostName, Device, Name = strcat('üîπ ', Device), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Device', DiskBusy, DiskBusyTrend;\r\nlet iopsTableData = iopsInFlight // iops\r\n| summarize IOPS = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) by HostName, Device // for devices, group by parentId (HostName) in workbook config\r\n| join kind = inner (\r\n    iopsInFlight\r\n    | make-series IOPSTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Device\r\n) on HostName\r\n| where Device == Device1\r\n| project Id = strcat(HostName, Device), HostName, Device, Name = strcat('üîπ ', Device), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Device', IOPS, IOPSTrend;\r\nbytesReadTableData\r\n| join kind = inner ( bytesWrittenTableData ) on Id\r\n| join kind = inner ( diskBusyTableData ) on Id\r\n| join kind = inner ( iopsTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, Id2, Name2, ParentId2, Kind2, Id3, Name3, ParentId3, Kind3, Device1, Device2, Device3, HostName1, HostName2, HostName3\r\n| project-rename ['Read Bytes/sec'] = BytesReadPerSecond, ['Read Bytes/sec Trend'] = BytesReadPerSecondTrend, ['Write Bytes/sec'] = BytesWrittenPerSecond, ['Write Bytes/sec Trend'] = BytesWrittenPerSecondTrend, ['% Disk Busy'] = DiskBusy, ['% Disk Busy Trend'] = DiskBusyTrend, ['IOPS Trend'] = IOPSTrend\r\n| order by Id asc\r\n| project-rename FullId = Id, GridId = Name, Name = ParentId",
        "size": 1,
        "showAnalytics": true,
        "title": "Disk IO Overview",
        "timeContext": {
          "durationMs": 14400000
        },
        "timeContextFromParameter": "timeRange",
        "exportParameterName": "selectedRow",
        "exportDefaultValue": "{\"Kind\":\"Unselected\"}",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters",
        "crossComponentResources": [
          "{selectedCluster}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "FullId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "HostName",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Device",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "GridId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Name",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Kind",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Read Bytes/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 11,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Read Bytes/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Write Bytes/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 11,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Write Bytes/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "% Disk Busy",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent",
                  "useGrouping": false,
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "% Disk Busy Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "IOPS",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "IOPS Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "treeType": 1,
            "groupBy": [
              "Name"
            ],
            "expandTopLevel": true,
            "finalBy": "GridId"
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "io"
      },
      "showPin": true,
      "name": "Disk IO Overview"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let data = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/net'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), Interface = tostring(Tags.interface)\r\n| extend ClusterName = tostring(Tags.[\"container.azm.ms/clusterId\"])\r\n| where ClusterName in ({selectedCluster})\r\n| extend partitionKey = strcat(HostName, '/', Interface, '/', Name)\r\n| order by partitionKey asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(partitionKey) != partitionKey, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(partitionKey) != partitionKey, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / datetime_diff('Second', TimeGenerated, PrevTimeGenerated), (Val - PrevVal) / datetime_diff('Second', TimeGenerated, PrevTimeGenerated))\r\n| where isnotnull(Rate)\r\n| project TimeGenerated, HostName, Interface, Name, Rate;\r\nlet bytesSent = data\r\n| where Name == 'bytes_sent';\r\nlet bytesReceived = data\r\n| where Name == 'bytes_recv';\r\nlet errorsOut = data\r\n| where Name == 'err_out';\r\nlet errorsIn = data\r\n| where Name == 'err_in';\r\nlet maxOn = -1;\r\nlet avgOn = -1;\r\nlet minOn = -1;\r\nlet bytesSentTableData = bytesSent // bytes sent per sec data\r\n| summarize BytesSentPerSecond = avg(Rate) by HostName, Interface // for interfaces, group by parentId (HostName) \r\n| join kind = inner (\r\n    bytesSent\r\n    | make-series BytesSentPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('üîπ ', Interface), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Interface', BytesSentPerSecond, BytesSentPerSecondTrend;\r\nlet bytesReceivedTableData = bytesReceived // bytes received per sec data\r\n| summarize BytesReceivedPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    bytesReceived\r\n    | make-series BytesReceivedPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('üîπ ', Interface), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Interface', BytesReceivedPerSecond, BytesReceivedPerSecondTrend;\r\nlet errorsOutTableData = errorsOut // errors out per sec data\r\n| summarize ErrorsOutPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    errorsOut\r\n    | make-series ErrorsOutPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('üîπ ', Interface), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Interface', ErrorsOutPerSecond, ErrorsOutPerSecondTrend;\r\nlet errorsInTableData = errorsIn // errors in per sec data\r\n| summarize ErrorsInPerSecond = avg(Rate) by HostName, Interface\r\n| join kind = inner (\r\n    errorsIn\r\n    | make-series ErrorsInPerSecondTrend = iif(avgOn != -1, avg(Rate), iif(maxOn != -1, max(Rate), min(Rate))) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {timeRange:grain} by HostName, Interface\r\n) on HostName\r\n| where Interface == Interface1\r\n| project Id = strcat(HostName, Interface), HostName, Interface, Name = strcat('üîπ ', Interface), ParentId = strcat('üñ•Ô∏è ', HostName), Kind = 'Interface', ErrorsInPerSecond, ErrorsInPerSecondTrend;\r\nbytesSentTableData\r\n| join kind = inner ( bytesReceivedTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| join kind = inner ( errorsOutTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| join kind = inner ( errorsInTableData ) on Id\r\n| project-away Id1, Name1, ParentId1, Kind1, HostName1, Interface1\r\n| project-rename ['Sent Bytes/sec'] = BytesSentPerSecond, ['Sent Bytes/sec Trend'] = BytesSentPerSecondTrend, ['Received Bytes/sec'] = BytesReceivedPerSecond, ['Received Bytes/sec Trend'] = BytesReceivedPerSecondTrend, ['Errors Out/sec'] = ErrorsOutPerSecond, ['ErrorsOut/sec Trend'] = ErrorsOutPerSecondTrend, ['Errors In/sec'] = ErrorsInPerSecond, ['Errors In/sec Trend'] = ErrorsInPerSecondTrend\r\n| order by Id asc\r\n| project-rename FullId = Id, GridId = Name, Name = ParentId",
        "size": 1,
        "title": "Network Overview",
        "timeContext": {
          "durationMs": 14400000
        },
        "timeContextFromParameter": "timeRange",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters",
        "crossComponentResources": [
          "{selectedCluster}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "FullId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "HostName",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Interface",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "GridId",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Name",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Kind",
              "formatter": 5,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Sent Bytes/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 11,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Sent Bytes/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Received Bytes/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 11,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Received Bytes/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Errors Out/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "ErrorsOut/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Errors In/sec",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Errors In/sec Trend",
              "formatter": 9,
              "formatOptions": {
                "showIcon": true
              }
            }
          ],
          "filter": true,
          "hierarchySettings": {
            "treeType": 1,
            "groupBy": [
              "Name"
            ],
            "expandTopLevel": true,
            "finalBy": "GridId"
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "io"
      },
      "showPin": true,
      "name": "Network Overview"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
